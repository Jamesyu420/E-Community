# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c:\Users\ThinkPad\scoop\apps\python37\3.7.4\Lib\site-packages\qt5_applications\Qt\bin\untitled1.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from webbrowser import open as op
from draw import main as draw_main
from overstep import flag as overstep_flag
from overstep import main as overstep_main
from cv2 import imread, imwrite, imshow, resize,split,merge
from throw import main as tw_main
from throw import flag as tw_flag
from aod import main as br_main
from aod import flag as br_flag
from car import main as car_main
from car import flag as car_flag
from car import CoordinatesGenerator
from throw_cut import main as tw_record
import datetime
import matplotlib.pyplot as plt
import picture_rc


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        self.email="smile20010508@126.com"
        self.cam_ip=0
        self.result=[]
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(805, 459)
        MainWindow.setWindowFlag(QtCore.Qt.FramelessWindowHint)     #
        MainWindow.setAttribute(QtCore.Qt.WA_TranslucentBackground)  #
        MainWindow.move(90, 40)
        MainWindow.setMouseTracking(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.leftwidget = QtWidgets.QWidget(self.centralwidget)
        self.leftwidget.setGeometry(QtCore.QRect(69, 80, 101, 331))
        self.leftwidget.setStyleSheet("border-bottom-left-radius:40px 40px;\n"
"border-top-right-radius: 40px 40px; \n"
"background-color:rgb(13,36,129);")
        self.leftwidget.setObjectName("leftwidget")
        self.home = QtWidgets.QPushButton(self.leftwidget)
        self.home.setGeometry(QtCore.QRect(0, 40, 101, 33))
        self.home.setStyleSheet("QPushButton{\n"
"    font: 9pt \"微软雅黑\";\n"
"\n"
"\n"
"color:rgba(225,225,225,65%);\n"
"qproperty-icon:url(:/images/image/主页.png);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(225,225,225,20%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgba(225,225,225,30%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.home.setCheckable(True)
        self.home.setAutoExclusive(True)
        self.home.setFlat(True)
        self.home.setObjectName("home")
        self.home.clicked.connect(self.home_func)
        self.detection = QtWidgets.QPushButton(self.leftwidget)
        self.detection.setGeometry(QtCore.QRect(0, 73, 101, 33))
        self.detection.setStyleSheet("QPushButton{\n"
"    font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(225,225,225,20%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgba(225,225,225,30%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);\n"
"}")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/images/image/监测.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.detection.setIcon(icon)
        self.detection.setCheckable(True)
        self.detection.setAutoExclusive(True)
        self.detection.setFlat(True)
        self.detection.setObjectName("detection")
        self.detection.clicked.connect(self.detection_func)
        self.report = QtWidgets.QPushButton(self.leftwidget)
        self.report.setGeometry(QtCore.QRect(0, 106, 101, 33))
        self.report.setStyleSheet("QPushButton{\n"
"    font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(225,225,225,20%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgba(225,225,225,30%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/images/image/报告.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.report.setIcon(icon1)
        self.report.setCheckable(True)
        self.report.setAutoExclusive(True)
        self.report.setFlat(True)
        self.report.setObjectName("report")
        self.report.clicked.connect(self.report_func)
        self.message = QtWidgets.QPushButton(self.leftwidget)
        self.message.setGeometry(QtCore.QRect(0, 139, 101, 31))
        self.message.setStyleSheet("QPushButton{\n"
"    font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"qproperty-icon:url(:/images/image/提醒.png);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(225,225,225,20%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgba(225,225,225,30%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.message.setCheckable(True)
        self.message.setAutoExclusive(True)
        self.message.setFlat(True)
        self.message.setObjectName("message")
        self.message.clicked.connect(self.message_func)
        self.connect_us = QtWidgets.QPushButton(self.leftwidget)
        self.connect_us.setGeometry(QtCore.QRect(0, 170, 101, 33))
        self.connect_us.setStyleSheet("QPushButton{\n"
"    font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"qproperty-icon:url(:/images/image/联系.png);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(225,225,225,20%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgba(225,225,225,30%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.connect_us.setCheckable(True)
        self.connect_us.setAutoExclusive(True)
        self.connect_us.setFlat(True)
        self.connect_us.setObjectName("connect_us")
        self.connect_us.clicked.connect(self.connect_us_func)
        self.headwidget = QtWidgets.QWidget(self.centralwidget)
        self.headwidget.setGeometry(QtCore.QRect(69, 33, 662, 47))
        self.headwidget.setMouseTracking(True)
        self.headwidget.setStyleSheet("QWidget#headwidget{\n"
"border-top-left-radius: 40px 40px; \n"
"border-top-right-radius: 40px 40px;\n"
"background-color:white;\n"
"}")
        self.headwidget.setObjectName("headwidget")
        self.close = QtWidgets.QPushButton(self.headwidget)
        self.close.setGeometry(QtCore.QRect(70, 20, 12, 12))
        self.close.setStyleSheet("QPushButton{background:#F76677;\n"
"border-radius:6px}\n"
"QPushButton:hover{background:red;}")
        self.close.setText("")
        self.close.setObjectName("close")
        self.close.clicked.connect(QtCore.QCoreApplication.instance().quit)   #
        self.max = QtWidgets.QPushButton(self.headwidget)
        self.max.setGeometry(QtCore.QRect(45, 20, 12, 12))
        self.max.setStyleSheet("QPushButton{background:#F7D674;border-radius:6px;}QPushButton:hover{background:yellow;}")
        self.max.setText("")
        self.max.setObjectName("max")
        self.max.clicked.connect(MainWindow.showMaximized)     #
        self.mini = QtWidgets.QPushButton(self.headwidget)
        self.mini.setGeometry(QtCore.QRect(20, 20, 12, 12))
        self.mini.setStyleSheet("QPushButton{background:#6DDF6D;border-radius:6px;}QPushButton:hover{background:green;}")
        self.mini.setText("")
        self.mini.setObjectName("mini")
        self.mini.clicked.connect(MainWindow.showMinimized)    #
        self.head = QtWidgets.QLabel(self.headwidget)
        self.head.setGeometry(QtCore.QRect(101, 20, 231, 16))
        self.head.setStyleSheet("font: 11pt \"微软雅黑\";")
        self.head.setObjectName("head")
        self.head.setMouseTracking(True)
        self.fill = QtWidgets.QLabel(self.centralwidget)
        self.fill.setGeometry(QtCore.QRect(109, 79, 101, 41))
        self.fill.setStyleSheet("background:white;")
        self.fill.setText("")
        self.fill.setObjectName("fill")
        self.detectwidget = QtWidgets.QWidget(self.centralwidget)
        self.detectwidget.setGeometry(QtCore.QRect(170, 80, 561, 331))
        self.detectwidget.setStyleSheet("QWidget#detectwidget{\n"
"\n"
"border-bottom-right-radius: 40px 40px; \n"
"background-color:white;\n"
"}")
        self.detectwidget.setObjectName("detectwidget")
        self.location = QtWidgets.QLabel(self.detectwidget)
        self.location.setGeometry(QtCore.QRect(179, 60, 81, 61))
        self.location.setStyleSheet("border-image: url(:/images/image/功能.png);")
        self.location.setText("")
        self.location.setObjectName("location")
        self.reports = QtWidgets.QLabel(self.detectwidget)
        self.reports.setGeometry(QtCore.QRect(29, 200, 101, 91))
        self.reports.setStyleSheet("border-image: url(:/images/image/分析.png);")
        self.reports.setText("")
        self.reports.setObjectName("reports")
        self.overstep = QtWidgets.QPushButton(self.detectwidget)
        self.overstep.setGeometry(QtCore.QRect(150, 180, 131, 131))
        self.overstep.setStyleSheet("\n"
"QPushButton{\n"
"    font: 9pt \"微软雅黑\";\n"
"border-top-right-radius: 20px 20px; \n"
"border-bottom-left-radius:40px;\n"
"color:\"white\";\n"
"border-image:url(:/images/image/越.png);\n"
"background-color:rgb(252,157,154);\n"
"}\n"
"QPushButton:hover{\n"
"border:3px solid white;\n"
"}\n"
"QPushButton:pressed{\n"
"background-color: rgb(0, 90, 225);\n"
"border:4px solid transparent;\n"
"}")
        self.overstep.setCheckable(False)
        self.overstep.setAutoExclusive(True)
        self.overstep.setFlat(False)
        self.overstep.setObjectName("overstep")
        self.overstep.clicked.connect(self.overstep_func)
        self.remind = QtWidgets.QLabel(self.detectwidget)
        self.remind.setGeometry(QtCore.QRect(439, 50, 91, 81))
        self.remind.setStyleSheet("border-image: url(:/images/image/提示.png);")
        self.remind.setText("")
        self.remind.setObjectName("remind")
        self.barrier = QtWidgets.QPushButton(self.detectwidget)
        self.barrier.setGeometry(QtCore.QRect(281, 20, 131, 131))
        self.barrier.setStyleSheet("\n"
"QPushButton{\n"
"    font: 9pt \"微软雅黑\";\n"
"border-bottom-left-radius: 20px 20px; \n"
"border-top-right-radius:40px;\n"
"color:\"white\";\n"
"\n"
"    \n"
"    border-image: url(:/images/image/zhang.png);\n"
"}\n"
"QPushButton:hover{\n"
"border:3px solid white;\n"
"}\n"
"QPushButton:pressed{\n"
"background-color: rgb(0, 90, 225);\n"
"border:4px solid transparent;\n"
"}")
        self.barrier.setCheckable(False)
        self.barrier.setAutoExclusive(True)
        self.barrier.setFlat(False)
        self.barrier.setObjectName("barrier")
        self.barrier.clicked.connect(self.barrier_func)
        self.functions = QtWidgets.QLabel(self.detectwidget)
        self.functions.setGeometry(QtCore.QRect(319, 210, 61, 81))
        self.functions.setStyleSheet("border-image: url(:/images/image/共.png);")
        self.functions.setText("")
        self.functions.setObjectName("functions")
        self.other_function = QtWidgets.QPushButton(self.detectwidget)
        self.other_function.setGeometry(QtCore.QRect(412, 180, 131, 131))
        self.other_function.setStyleSheet("QPushButton{\n"
"    font: 9pt \"微软雅黑\";\n"
"border-top-left-radius: 20px 20px; \n"
"border-bottom-right-radius:40px;\n"
"color:\"white\";\n"
"\n"
"    border-image: url(:/images/image/其他.png);\n"
"}\n"
"QPushButton:hover{\n"
"border:3px solid white;\n"
"}\n"
"QPushButton:pressed{\n"
"background-color: rgb(0, 90, 225);\n"
"border:4px solid transparent;\n"
"}")
        self.other_function.setCheckable(False)
        self.other_function.setAutoExclusive(True)
        self.other_function.setFlat(False)
        self.other_function.setObjectName("other_function")
        self.other_function.clicked.connect(self.other_function_func)
        self.throw_2 = QtWidgets.QPushButton(self.detectwidget)
        self.throw_2.setGeometry(QtCore.QRect(19, 20, 131, 131))
        self.throw_2.setStyleSheet("QPushButton{\n"
"    font: 9pt \"微软雅黑\";\n"
"border-bottom-right-radius: 20px 20px; \n"
"border-top-left-radius:40px;\n"
"color:\"white\";\n"
"    border-image: url(:/images/image/高.png);\n"
"}\n"
"QPushButton:hover{\n"
"border:3px solid white;\n"
"}\n"
"QPushButton:pressed{\n"
"background-color: rgb(0, 90, 225);\n"
"border:4px solid transparent;\n"
"}")
        self.throw_2.setCheckable(False)
        self.throw_2.setAutoExclusive(True)
        self.throw_2.setFlat(False)
        self.throw_2.setObjectName("throw_2")
        self.throw_2.clicked.connect(self.throw_2_func)
        self.throw_2_widget = QtWidgets.QWidget(self.centralwidget)
        self.throw_2_widget.setGeometry(QtCore.QRect(170, 80, 561, 331))
        self.throw_2_widget.setStyleSheet("QWidget#throw_2_widget{\n"
"\n"
"border-bottom-right-radius: 40px 40px; \n"
"background-color:white;\n"
"}")
        self.throw_2_widget.setObjectName("throw_2_widget")
        self.tw_display = QtWidgets.QPushButton(self.throw_2_widget)
        self.tw_display.setGeometry(QtCore.QRect(450,10, 75, 23))
        self.tw_display.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.tw_display.setObjectName("tw_display")
        self.tw_display.clicked.connect(self.tw_display_func)
        self.tw_sv = QtWidgets.QPushButton(self.throw_2_widget)
        self.tw_sv.setGeometry(QtCore.QRect(450,160, 75, 23))
        self.tw_sv.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.tw_sv.setObjectName("tw_sv")
        self.tw_sv.clicked.connect(self.tw_sv_func)
        self.tw_stop = QtWidgets.QPushButton(self.throw_2_widget)
        self.tw_stop.setGeometry(QtCore.QRect(450,60, 75, 23))
        self.tw_stop.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.tw_stop.setObjectName("tw_stop")
        self.tw_stop.clicked.connect(self.tw_stop_func)
        self.tw_select = QtWidgets.QPushButton(self.throw_2_widget)
        self.tw_select.setGeometry(QtCore.QRect(450,110, 75, 23))
        self.tw_select.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.tw_select.setObjectName("tw_select")
        self.tw_select.clicked.connect(self.tw_select_func)
        self.tw_record = QtWidgets.QPushButton(self.throw_2_widget)
        self.tw_record.setGeometry(QtCore.QRect(450,210, 75, 23))
        self.tw_record.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.tw_record.setObjectName("tw_record")
        self.tw_record.clicked.connect(self.tw_record_func)
        self.throw_watch = QtWidgets.QLabel(self.throw_2_widget)
        self.throw_watch.setGeometry(QtCore.QRect(40,10,320,184))
        self.barrier_widget = QtWidgets.QWidget(self.centralwidget)
        self.barrier_widget.setGeometry(QtCore.QRect(170, 80, 561, 331))
        self.barrier_widget.setStyleSheet("QWidget#barrier_widget{\n"
"\n"
"border-bottom-right-radius: 40px 40px; \n"
"background-color:white;\n"
"}")
        self.barrier_widget.setObjectName("barrier_widget")
        self.br_display = QtWidgets.QPushButton(self.barrier_widget)
        self.br_display.setGeometry(QtCore.QRect(450,150, 75, 23))
        self.br_display.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.br_display.setObjectName("br_display")
        self.br_display.clicked.connect(self.br_display_func)
        self.br_stop = QtWidgets.QPushButton(self.barrier_widget)
        self.br_stop.setGeometry(QtCore.QRect(450,200, 75, 23))
        self.br_stop.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.br_stop.setObjectName("br_stop")
        self.br_stop.clicked.connect(self.br_stop_func)
        self.barrier_watch = QtWidgets.QLabel(self.barrier_widget)
        self.barrier_watch.setGeometry(QtCore.QRect(40,10,360,288))
        self.barrier_back = QtWidgets.QPushButton(self.barrier_widget)
        self.barrier_back.setGeometry(QtCore.QRect(450, 280, 75, 23))
        self.barrier_back.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"qproperty-icon:url(:/images/image/返回.png);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.barrier_back.setObjectName("barrier_back")
        self.barrier_back.clicked.connect(lambda x: self.detectwidget.raise_())
        self.analyse_widget = QtWidgets.QWidget(self.centralwidget)
        self.analyse_widget.setGeometry(QtCore.QRect(170, 80, 561, 331))
        self.analyse_widget.setStyleSheet("QWidget#analyse_widget{\n"
"\n"
"border-bottom-right-radius: 40px 40px; \n"
"background-color:white;\n"
"}")
        self.analyse_widget.setObjectName("analyse_widget")
        self.m_analyse_widget = QtWidgets.QWidget(self.centralwidget)
        self.m_analyse_widget.setGeometry(QtCore.QRect(170, 80, 561, 331))
        self.m_analyse_widget.setStyleSheet("QWidget#m_analyse_widget{\n"
"\n"
"border-bottom-right-radius: 40px 40px; \n"
"background-color:white;\n"
"}")
        self.m_analyse_widget.setObjectName("m_analyse_widget")        
        self.zhangai_bt = QtWidgets.QPushButton(self.m_analyse_widget)
        self.zhangai_bt.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.zhangai_bt.setGeometry(QtCore.QRect(20, 260, 75, 23))
        self.zhangai_bt.setObjectName("zhangai_bt")
        self.zhangai_bt.clicked.connect(lambda: self.chart("barrier"))
        self.paowu_bt = QtWidgets.QPushButton(self.m_analyse_widget)
        self.paowu_bt.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.paowu_bt.setGeometry(QtCore.QRect(20, 180, 75, 23))
        self.paowu_bt.setObjectName("paowu_bt")
        self.paowu_bt.clicked.connect(lambda: self.chart("throw"))
        self.tingche_bt = QtWidgets.QPushButton(self.m_analyse_widget)
        self.tingche_bt.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.tingche_bt.setGeometry(QtCore.QRect(20, 300, 75, 23))
        self.tingche_bt.setObjectName("tingche_bt")
        self.tingche_bt.clicked.connect(lambda: self.chart("car_stop"))
        self.yuejie_bt = QtWidgets.QPushButton(self.m_analyse_widget)
        self.yuejie_bt.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.yuejie_bt.setGeometry(QtCore.QRect(20, 220, 75, 23))
        self.yuejie_bt.setObjectName("yuejie_bt")
        self.yuejie_bt.clicked.connect(lambda: self.chart("overstep"))
        self.huatu = QtWidgets.QLabel(self.m_analyse_widget)
        self.huatu.setGeometry(QtCore.QRect(110,170,241, 151))
        self.huatu.setText("")
        self.huatu.setObjectName("huatu")
        self.paowu = QtWidgets.QLabel(self.analyse_widget)
        self.paowu.setGeometry(QtCore.QRect(20, 10, 231, 61))
        self.paowu.setStyleSheet("border-radius:5px;\n"
"border-image:url(:/images/image/a.jpg);\n"
"color:white")
        self.paowu.setObjectName("paowu")
        self.yuejie = QtWidgets.QLabel(self.analyse_widget)
        self.yuejie.setGeometry(QtCore.QRect(280, 10, 231, 61))
        self.yuejie.setStyleSheet("border-image:url(:/images/image/b.jpg);\n"
"color:white;\n"
"border-radius:5px;")
        self.yuejie.setObjectName("yuejie")
        self.zhangai = QtWidgets.QLabel(self.analyse_widget)
        self.zhangai.setGeometry(QtCore.QRect(20, 100, 231, 61))
        self.zhangai.setStyleSheet("border-image:url(:/images/image/c.jpg);\n"
"color:white;\n"
"border-radius:5px;")
        self.zhangai.setObjectName("zhangai")
        self.tingche = QtWidgets.QLabel(self.analyse_widget)
        self.tingche.setGeometry(QtCore.QRect(280, 100, 231, 61))
        self.tingche.setStyleSheet("border-image:url(:/images/image/d.jpg);\n"
"color:white;\n"
"border-radius:5px;")
        self.tingche.setObjectName("tingche")
        self.paowu_2 = QtWidgets.QLabel(self.analyse_widget)
        self.paowu_2.setGeometry(QtCore.QRect(23, 40, 81, 31))
        self.paowu_2.setStyleSheet("font: 22pt \"微软雅黑\";\n"
"color:white;")
        self.paowu_2.setObjectName("paowu_2")
        self.paowu_3 = QtWidgets.QLabel(self.analyse_widget)
        self.paowu_3.setGeometry(QtCore.QRect(79, 53, 54, 12))
        self.paowu_3.setStyleSheet("font: 9pt \"微软雅黑\";\n"
"color:white;")
        self.paowu_3.setObjectName("paowu_3")
        self.yuejie_2 = QtWidgets.QLabel(self.analyse_widget)
        self.yuejie_2.setGeometry(QtCore.QRect(283, 40, 81, 31))
        self.yuejie_2.setStyleSheet("font: 22pt \"微软雅黑\";\n"
"color:white;")
        self.yuejie_2.setObjectName("yuejie_2")
        self.yuejie_3 = QtWidgets.QLabel(self.analyse_widget)
        self.yuejie_3.setGeometry(QtCore.QRect(339, 53, 54, 12))
        self.yuejie_3.setStyleSheet("font: 9pt \"微软雅黑\";\n"
"color:white;")
        self.yuejie_3.setObjectName("yuejie_3")
        self.zhangai_2 = QtWidgets.QLabel(self.analyse_widget)
        self.zhangai_2.setGeometry(QtCore.QRect(23, 130, 81, 31))
        self.zhangai_2.setStyleSheet("font: 22pt \"微软雅黑\";\n"
"color:white;")
        self.zhangai_2.setObjectName("zhangai_2")
        self.zhangai_3 = QtWidgets.QLabel(self.analyse_widget)
        self.zhangai_3.setGeometry(QtCore.QRect(79, 143, 54, 12))
        self.zhangai_3.setStyleSheet("font: 9pt \"微软雅黑\";\n"
"color:white;")
        self.zhangai_3.setObjectName("zhangai_3")
        self.tingche_2 = QtWidgets.QLabel(self.analyse_widget)
        self.tingche_2.setGeometry(QtCore.QRect(283, 130, 81, 31))
        self.tingche_2.setStyleSheet("font: 22pt \"微软雅黑\";\n"
"color:white;")
        self.tingche_2.setObjectName("tingche_2")
        self.tingche_3 = QtWidgets.QLabel(self.analyse_widget)
        self.tingche_3.setGeometry(QtCore.QRect(339, 143, 54, 12))
        self.tingche_3.setStyleSheet("font: 9pt \"微软雅黑\";\n"
"color:white;")
        self.tingche_3.setObjectName("tingche_3")
        self.m_paowu = QtWidgets.QLabel(self.m_analyse_widget)
        self.m_paowu.setGeometry(QtCore.QRect(20, 10, 231, 61))
        self.m_paowu.setStyleSheet("border-radius:5px;\n"
"border-image:url(:/images/image/a.jpg);\n"
"color:white")
        self.m_paowu.setObjectName("m_paowu")
        self.m_yuejie = QtWidgets.QLabel(self.m_analyse_widget)
        self.m_yuejie.setGeometry(QtCore.QRect(280, 10, 231, 61))
        self.m_yuejie.setStyleSheet("border-image:url(:/images/image/b.jpg);\n"
"color:white;\n"
"border-radius:5px;")
        self.m_yuejie.setObjectName("m_yuejie")
        self.m_zhangai = QtWidgets.QLabel(self.m_analyse_widget)
        self.m_zhangai.setGeometry(QtCore.QRect(20, 100, 231, 61))
        self.m_zhangai.setStyleSheet("border-image:url(:/images/image/c.jpg);\n"
"color:white;\n"
"border-radius:5px;")
        self.m_zhangai.setObjectName("m_zhangai")
        self.m_tingche = QtWidgets.QLabel(self.m_analyse_widget)
        self.m_tingche.setGeometry(QtCore.QRect(280, 100, 231, 61))
        self.m_tingche.setStyleSheet("border-image:url(:/images/image/d.jpg);\n"
"color:white;\n"
"border-radius:5px;")
        self.m_tingche.setObjectName("m_tingche")
        self.m_paowu_2 = QtWidgets.QLabel(self.m_analyse_widget)
        self.m_paowu_2.setGeometry(QtCore.QRect(23, 40, 81, 31))
        self.m_paowu_2.setStyleSheet("font: 22pt \"微软雅黑\";\n"
"color:white;")
        self.m_paowu_2.setObjectName("m_paowu_2")
        self.m_paowu_3 = QtWidgets.QLabel(self.m_analyse_widget)
        self.m_paowu_3.setGeometry(QtCore.QRect(79, 53, 54, 12))
        self.m_paowu_3.setStyleSheet("font: 9pt \"微软雅黑\";\n"
"color:white;")
        self.m_paowu_3.setObjectName("m_paowu_3")
        self.m_yuejie_2 = QtWidgets.QLabel(self.m_analyse_widget)
        self.m_yuejie_2.setGeometry(QtCore.QRect(283, 40, 81, 31))
        self.m_yuejie_2.setStyleSheet("font: 22pt \"微软雅黑\";\n"
"color:white;")
        self.m_yuejie_2.setObjectName("m_yuejie_2")
        self.m_yuejie_3 = QtWidgets.QLabel(self.m_analyse_widget)
        self.m_yuejie_3.setGeometry(QtCore.QRect(339, 53, 54, 12))
        self.m_yuejie_3.setStyleSheet("font: 9pt \"微软雅黑\";\n"
"color:white;")
        self.m_yuejie_3.setObjectName("m_yuejie_3")
        self.m_zhangai_2 = QtWidgets.QLabel(self.m_analyse_widget)
        self.m_zhangai_2.setGeometry(QtCore.QRect(23, 130, 81, 31))
        self.m_zhangai_2.setStyleSheet("font: 22pt \"微软雅黑\";\n"
"color:white;")
        self.m_zhangai_2.setObjectName("m_zhangai_2")
        self.m_zhangai_3 = QtWidgets.QLabel(self.m_analyse_widget)
        self.m_zhangai_3.setGeometry(QtCore.QRect(79, 143, 54, 12))
        self.m_zhangai_3.setStyleSheet("font: 9pt \"微软雅黑\";\n"
"color:white;")
        self.m_zhangai_3.setObjectName("m_zhangai_3")
        self.m_tingche_2 = QtWidgets.QLabel(self.m_analyse_widget)
        self.m_tingche_2.setGeometry(QtCore.QRect(283, 130, 81, 31))
        self.m_tingche_2.setStyleSheet("font: 22pt \"微软雅黑\";\n"
"color:white;")
        self.m_tingche_2.setObjectName("m_tingche_2")
        self.m_tingche_3 = QtWidgets.QLabel(self.m_analyse_widget)
        self.m_tingche_3.setGeometry(QtCore.QRect(339, 143, 54, 12))
        self.m_tingche_3.setStyleSheet("font: 9pt \"微软雅黑\";\n"
"color:white;")
        self.m_tingche_3.setObjectName("m_tingche_3")
        self.left_pic = QtWidgets.QLabel(self.analyse_widget)
        self.left_pic.setGeometry(QtCore.QRect(20, 180, 131, 131))
        self.left_pic.setStyleSheet("border-image: url(:/images/image/evening_list.png);")
        self.left_pic.setText("")
        self.left_pic.setObjectName("left_pic")
        self.message1 = QtWidgets.QLabel(self.analyse_widget)
        self.message1.setGeometry(QtCore.QRect(190, 230, 211, 16))
        self.message1.setObjectName("message1")
        self.message2 = QtWidgets.QLabel(self.analyse_widget)
        self.message2.setGeometry(QtCore.QRect(190, 270, 241, 16))
        self.message2.setObjectName("message2")
        self.time = QtWidgets.QLabel(self.analyse_widget)
        self.time.setGeometry(QtCore.QRect(190, 180, 141, 31))
        self.time.setStyleSheet("font: 20pt \"Ink Free\";\n"
"font: 20pt \"Gabriola\";")
        self.time.setObjectName("time")
        self.right_pic = QtWidgets.QLabel(self.analyse_widget)
        self.right_pic.setGeometry(QtCore.QRect(410, 180, 131, 131))
        self.right_pic.setStyleSheet("border-image: url(:/images/image/evening_pack.png);")
        self.right_pic.setText("")
        self.right_pic.setObjectName("right_pic")
        self.month_rp = QtWidgets.QPushButton(self.analyse_widget)
        self.month_rp.setGeometry(QtCore.QRect(220, 300, 81, 23))
        self.month_rp.setStyleSheet(
"QPushButton{\n"
"border-image: url(:/images/image/b.jpg);\n"
"border-radius:5px;\n"
"color:rgba(225,225,225,75%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.month_rp.setObjectName("month_rp")
        self.month_rp.clicked.connect(self.month_rp_func)
        self.overstep_widget = QtWidgets.QWidget(self.centralwidget)
        self.overstep_widget.setGeometry(QtCore.QRect(170, 80, 561, 331))
        self.overstep_widget.setStyleSheet("QWidget#overstep_widget{\n"
"\n"
"border-bottom-right-radius: 40px 40px; \n"
"background-color:white;\n"
"}")
        self.overstep_widget.setObjectName("overstep_widget")
        self.draw = QtWidgets.QPushButton(self.overstep_widget)
        self.draw.setGeometry(QtCore.QRect(450,100, 75, 23))
        self.draw.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.draw.setObjectName("draw")
        self.draw.clicked.connect(self.draw_func)
        self.os_stop = QtWidgets.QPushButton(self.overstep_widget)
        self.os_stop.setGeometry(QtCore.QRect(450,200, 75, 23))
        self.os_stop.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.os_stop.setObjectName("os_stop")
        self.os_stop.clicked.connect(self.os_stop_func)
        self.os_display = QtWidgets.QPushButton(self.overstep_widget)
        self.os_display.setGeometry(QtCore.QRect(450,150, 75, 23))
        self.os_display.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.os_display.setObjectName("os_display")
        self.os_display.clicked.connect(self.os_display_func)
        self.os_upload = QtWidgets.QPushButton(self.overstep_widget)
        self.os_upload.setGeometry(QtCore.QRect(450,50, 75, 23))
        self.os_upload.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.os_upload.setObjectName("os_upload")
        self.os_upload.clicked.connect(self.os_upload_func)
        self.overstep_watch = QtWidgets.QLabel(self.overstep_widget)
        self.overstep_watch.setGeometry(QtCore.QRect(40,10,335,250))
        self.overstep_back = QtWidgets.QPushButton(self.overstep_widget)
        self.overstep_back.setGeometry(QtCore.QRect(450, 280, 75,23))
        self.overstep_back.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"qproperty-icon:url(:/images/image/返回.png);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.overstep_back.setObjectName("overstep_back")
        self.overstep_back.clicked.connect(lambda x:self.detectwidget.raise_())
        self.throw_2_back = QtWidgets.QPushButton(self.throw_2_widget)
        self.throw_2_back.setGeometry(QtCore.QRect(450, 280, 75,23))
        self.throw_2_back.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"qproperty-icon:url(:/images/image/返回.png);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.throw_2_back.setObjectName("throw_2_back")
        self.throw_2_back.clicked.connect(lambda x:self.detectwidget.raise_())
        self.otherfunction_widget = QtWidgets.QWidget(self.centralwidget)
        self.otherfunction_widget.setGeometry(QtCore.QRect(170, 80, 561, 331))
        self.otherfunction_widget.setStyleSheet("QWidget#otherfunction_widget{\n"
"\n"
"border-bottom-right-radius: 40px 40px; \n"
"background-color:white;\n"
"}")
        self.otherfunction_widget.setObjectName("otherfunction_widget")
        self.of_draw = QtWidgets.QPushButton(self.otherfunction_widget)
        self.of_draw.setGeometry(QtCore.QRect(450,100, 75, 23))
        self.of_draw.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.of_draw.setObjectName("of_draw")
        self.of_draw.clicked.connect(self.of_draw_func)
        self.of_upload = QtWidgets.QPushButton(self.otherfunction_widget)
        self.of_upload.setGeometry(QtCore.QRect(450,50, 75, 23))
        self.of_upload.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.of_upload.setObjectName("of_upload")
        self.of_upload.clicked.connect(self.of_upload_func)
        self.of_display = QtWidgets.QPushButton(self.otherfunction_widget)
        self.of_display.setGeometry(QtCore.QRect(450,150, 75, 23))
        self.of_display.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.of_display.setObjectName("of_display")
        self.of_display.clicked.connect(self.of_display_func)
        self.of_stop = QtWidgets.QPushButton(self.otherfunction_widget)
        self.of_stop.setGeometry(QtCore.QRect(450,200, 75, 23))
        self.of_stop.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.of_stop.setObjectName("of_stop")
        self.of_stop.clicked.connect(self.of_stop_func)
        self.ow_fun_watch = QtWidgets.QLabel(self.otherfunction_widget)
        self.ow_fun_watch.setGeometry(QtCore.QRect(40,50,360,220))
        self.otherfun_back = QtWidgets.QPushButton(self.otherfunction_widget)
        self.otherfun_back.setGeometry(QtCore.QRect(450, 280, 75,23))
        self.otherfun_back.setStyleSheet("\n"
"QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"border-radius:5px;\n"
"font: 9pt \"微软雅黑\";\n"
"color:rgba(225,225,225,65%);\n"
"qproperty-icon:url(:/images/image/返回.png);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.otherfun_back.setObjectName("otherfun_back")
        self.otherfun_back.clicked.connect(lambda x:self.detectwidget.raise_())
        self.contact_widget = QtWidgets.QWidget(self.centralwidget)
        self.contact_widget.setGeometry(QtCore.QRect(170, 80, 561, 331))
        self.contact_widget.setStyleSheet("QWidget#contact_widget{\n"
"\n"
"border-bottom-right-radius: 40px 40px; \n"
"background:white;\n"
"}")
        self.contact_widget.setObjectName("contact_widget")
        self.picture = QtWidgets.QLabel(self.contact_widget)
        self.picture.setGeometry(QtCore.QRect(10, 70, 271, 181))
        self.picture.setStyleSheet("border-image: url(:/images/image/联系我们.png);")
        self.picture.setText("")
        self.picture.setObjectName("picture")
        self.contact_text = QtWidgets.QLabel(self.contact_widget)
        self.contact_text.setGeometry(QtCore.QRect(280, 70, 271, 181))
        self.contact_text.setStyleSheet("color:white;\n"
"border-image:url(:/images/image/beij2.png);")
        self.contact_text.setObjectName("contact_text")
        self.remind_widget = QtWidgets.QWidget(self.centralwidget)
        self.remind_widget.setGeometry(QtCore.QRect(170, 80, 561, 331))
        self.remind_widget.setStyleSheet("QWidget#remind_widget{\n"
"\n"
"border-bottom-right-radius: 40px 40px; \n"
"background-color:white;\n"
"}")
        self.remind_widget.setObjectName("remind_widget")
        self.label_10 = QtWidgets.QLabel(self.remind_widget)
        self.label_10.setGeometry(QtCore.QRect(20, 42, 54, 12))
        self.label_10.setObjectName("label_10")
        self.label_14 = QtWidgets.QLabel(self.remind_widget)
        self.label_14.setGeometry(QtCore.QRect(20, 86, 54, 12))
        self.label_14.setObjectName("label_14")
        self.label_11 = QtWidgets.QLabel(self.remind_widget)
        self.label_11.setGeometry(QtCore.QRect(20, 110, 481, 61))
        self.label_11.setObjectName("label_11")
        self.label_13 = QtWidgets.QLabel(self.m_analyse_widget)
        self.label_13.setGeometry(QtCore.QRect(350, 175, 191, 141))
        self.label_13.setStyleSheet("border-image: url(:/images/image/report.png);\n"
"color:white;border-radius:15px")
        self.label_13.setObjectName("label_13")
        self.certain = QtWidgets.QPushButton(self.remind_widget)
        self.certain.setGeometry(QtCore.QRect(220, 170, 75, 23))
        self.certain.setStyleSheet("QPushButton{\n"
"background-color:rgb(13,36,129);\n"
"color:rgba(225,225,225,65%);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}\n"
"QPushButton:checked{\n"
"background-color: rgb(77,77,77);\n"
"border:none;\n"
"color:rgb(255, 255, 255);}")
        self.certain.setObjectName("certain")
        self.certain.clicked.connect(self.certain_func)
        self.input_email = QtWidgets.QTextEdit(self.remind_widget)
        self.input_email.setGeometry(QtCore.QRect(77, 36, 221, 24))
        self.input_email.setUndoRedoEnabled(True)
        self.input_email.setObjectName("input_email")
        self.input_cam = QtWidgets.QTextEdit(self.remind_widget)
        self.input_cam.setGeometry(QtCore.QRect(77, 80, 221, 24))
        self.input_cam.setUndoRedoEnabled(True)
        self.input_cam.setObjectName("input_cam")
        self.email_pic = QtWidgets.QLabel(self.remind_widget)
        self.email_pic.setGeometry(QtCore.QRect(350, 160, 191, 161))
        self.email_pic.setStyleSheet("border-image: url(:/images/image/email.png);")
        self.email_pic.setText("")
        self.email_pic.setObjectName("email_pic")
        self.home_widget = QtWidgets.QWidget(self.centralwidget)
        self.home_widget.setGeometry(QtCore.QRect(170, 80, 561, 331))
        self.home_widget.setStyleSheet("QWidget#home_widget{\n"
"\n"
"border-bottom-right-radius: 40px 40px; \n"
"background-color:white;\n"
"}")
        self.home_widget.setObjectName("home_widget")
        self.label = QtWidgets.QLabel(self.home_widget)
        self.label.setGeometry(QtCore.QRect(30, 30, 491, 101))
        self.label.setStyleSheet("border-radius:15px;\n"
"background:rgb(143,170,220);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.learn_more = QtWidgets.QPushButton(self.home_widget)
        self.learn_more.setGeometry(QtCore.QRect(420, 100, 41, 23))
        self.learn_more.setStyleSheet("QPushButton{\n"
"    font: 9pt \"微软雅黑\";\n"
"color:rgb(13,36,129);\n"
"background:transparent;\n"
"}\n"
"QPushButton:hover{\n"
"color:rgba(255, 255, 255,50%);}\n"
"QPushButton:pressed{\n"
"\n"
"color:rgb(255, 255, 255);}")
        self.learn_more.setCheckable(True)
        self.learn_more.setAutoExclusive(False)
        self.learn_more.setObjectName("learn_more")
        self.learn_more.clicked.connect(lambda x:op('https://www.bilibili.com/'))
        self.label_2 = QtWidgets.QLabel(self.home_widget)
        self.label_2.setGeometry(QtCore.QRect(40, 10, 121, 121))
        self.label_2.setStyleSheet("border-image: url(:/images/image/图片3.png);")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.home_widget)
        self.label_3.setGeometry(QtCore.QRect(455, 104, 15, 15))
        self.label_3.setStyleSheet("border-image: url(:/images/image/图片4.png);")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.home_widget)
        self.label_4.setGeometry(QtCore.QRect(170, 70, 291, 16))
        self.label_4.setStyleSheet("font: 14pt \"楷体\";\n"
"color:rgb(13,36,129);")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.home_widget)
        self.label_5.setGeometry(QtCore.QRect(30, 140, 91, 21))
        self.label_5.setStyleSheet("font: 75 12pt \"微软雅黑\";")
        self.label_5.setObjectName("label_5")
        self.home_throw = QtWidgets.QPushButton(self.home_widget)
        self.home_throw.setGeometry(QtCore.QRect(30, 170, 291, 31))
        self.home_throw.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.home_throw.setStyleSheet("QPushButton{\n"
"font: 9pt \"微软雅黑\";\n"
"text-align:left;\n"
"border-radius:10px;\n"
"background:rgb(121,190,238);\n"
"color:rgb(19,32,87);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(121,190,238,70%);\n"
"}\n"
"QPushButton:pressed{\n"
"background-color: rgba(121,190,238,40%);\n"
"}\n"
"")
        self.home_throw.setObjectName("home_throw")
        self.home_throw.clicked.connect(lambda x:op('https://www.bilibili.com/'))
        self.home_barrier = QtWidgets.QPushButton(self.home_widget)
        self.home_barrier.setGeometry(QtCore.QRect(30, 210, 291, 31))
        self.home_barrier.setStyleSheet("QPushButton{\n"
"font: 9pt \"微软雅黑\";\n"
"text-align:left;\n"
"border-radius:10px;\n"
"background:rgb(250,218,141);\n"
"color:rgb(19,32,87);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(250,218,141,70%);\n"
"}\n"
"QPushButton:pressed{\n"
"background-color: rgba(250,218,141,40%);\n"
"}\n"
"")
        self.home_barrier.setObjectName("home_barrier")
        self.home_barrier.clicked.connect(lambda x:op('https://www.bilibili.com/'))
        self.home_overstep = QtWidgets.QPushButton(self.home_widget)
        self.home_overstep.setGeometry(QtCore.QRect(30, 250, 291, 31))
        self.home_overstep.setStyleSheet("QPushButton{\n"
"font: 9pt \"微软雅黑\";\n"
"text-align:left;\n"
"border-radius:10px;\n"
"background:rgb(252,157,154);\n"
"color:rgb(19,32,87);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(252,157,154,70%);\n"
"}\n"
"QPushButton:pressed{\n"
"background-color: rgba(252,157,154,40%);\n"
"}\n"
"")
        self.home_overstep.setObjectName("home_overstep")
        self.home_overstep.clicked.connect(lambda x:op('https://www.bilibili.com/'))
        self.home_otfun = QtWidgets.QPushButton(self.home_widget)
        self.home_otfun.setGeometry(QtCore.QRect(30, 290, 291, 31))
        self.home_otfun.setStyleSheet("QPushButton{\n"
"font: 9pt \"微软雅黑\";\n"
"text-align:left;\n"
"border-radius:10px;\n"
"background:rgb(116,198,157);\n"
"color:rgb(19,32,87);\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(116,198,157,70%);\n"
"}\n"
"QPushButton:pressed{\n"
"background-color: rgba(116,198,157,40%);\n"
"}\n"
"")
        self.home_otfun.setObjectName("home_otfun")
        self.home_otfun.clicked.connect(lambda x:op('https://www.bilibili.com/'))
        self.home_start = QtWidgets.QPushButton(self.home_widget)
        self.home_start.setGeometry(QtCore.QRect(390, 210, 131, 81))
        self.home_start.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.home_start.setStyleSheet("\n"
"\n"
"QPushButton{\n"
"font: 75 12pt \"微软雅黑\";\n"
"\n"
"border-radius:10px;\n"
"background:rgb(13,36,129);\n"
"color:white;\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgba(13,36,129,80%);\n"
"}\n"
"QPushButton:pressed{\n"
"background-color: rgba(13,36,129,60%);\n"
"}\n"
"")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("c:\\Users\\ThinkPad\\scoop\\apps\\python37\\3.7.4\\Lib\\site-packages\\qt5_applications\\Qt\\bin\\../../../../../../../../../Desktop/图片6.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.home_start.setIcon(icon2)
        self.home_start.setObjectName("home_start")
        self.home_start.clicked.connect(lambda x:self.detectwidget.raise_())
        self.label_6 = QtWidgets.QLabel(self.home_widget)
        self.label_6.setGeometry(QtCore.QRect(290, 179, 15, 15))
        self.label_6.setStyleSheet("border-image: url(:/images/image/图片4.png);")
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.home_widget)
        self.label_7.setGeometry(QtCore.QRect(290, 219, 15, 15))
        self.label_7.setStyleSheet("border-image: url(:/images/image/图片4.png);")
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.home_widget)
        self.label_8.setGeometry(QtCore.QRect(290, 259, 15, 15))
        self.label_8.setStyleSheet("border-image: url(:/images/image/图片4.png);")
        self.label_8.setText("")
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.home_widget)
        self.label_9.setGeometry(QtCore.QRect(290, 299, 15, 15))
        self.label_9.setStyleSheet("border-image: url(:/images/image/图片4.png);")
        self.label_9.setText("")
        self.label_9.setObjectName("label_9")
        self.home_barrier.raise_()
        self.home_throw.raise_()
        self.label.raise_()
        self.learn_more.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self.label_4.raise_()
        self.label_5.raise_()
        self.home_overstep.raise_()
        self.home_otfun.raise_()
        self.home_start.raise_()
        self.label_6.raise_()
        self.label_7.raise_()
        self.label_8.raise_()
        self.label_9.raise_()
        self.analyse_widget.raise_()
        self.remind_widget.raise_()
        self.otherfunction_widget.raise_()
        self.barrier_widget.raise_()
        self.overstep_widget.raise_()
        self.contact_widget.raise_()
        self.detectwidget.raise_()
        self.home_widget.raise_()
        self.fill.lower()
        self.leftwidget.raise_()
        self.headwidget.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 805, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        month=datetime.datetime.now().month
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.message1.setText(_translate("MainWindow", "晚上啦，住户的快递都拿走了吗？"))
        self.message2.setText(_translate("MainWindow", "今天的任务都完成了吗？"))
        self.time.setText(_translate("MainWindow", "Good morning!"))
        self.month_rp.setText(_translate("MainWindow", "查看月度报告"))
        self.paowu.setText(_translate("MainWindow", " 今日高空抛物行为发生次数：\n"
"\n"
"\n"
""))
        self.yuejie.setText(_translate("MainWindow", " 今日越界行为发生次数：\n"
"\n"
"\n"
""))
        self.zhangai.setText(_translate("MainWindow", " 今日障碍物遗留行为发生次数：\n"
"\n"
"\n"
""))
        self.tingche.setText(_translate("MainWindow", " 现停车位剩余数：\n"
"\n"
"\n"
""))
        self.paowu_2.setText(_translate("MainWindow", "1"))
        self.paowu_3.setText(_translate("MainWindow", "次"))
        self.yuejie_2.setText(_translate("MainWindow", "2"))
        self.yuejie_3.setText(_translate("MainWindow", "次"))
        self.zhangai_2.setText(_translate("MainWindow", "3"))
        self.zhangai_3.setText(_translate("MainWindow", "次"))
        self.tingche_2.setText(_translate("MainWindow", "4"))
        self.tingche_3.setText(_translate("MainWindow", "次"))

        self.m_paowu.setText(_translate("MainWindow", " "+str(month-1)+"月高空抛物行为发生次数：\n"
"\n"
"\n"
""))
        self.m_yuejie.setText(_translate("MainWindow", " "+str(month-1)+"月越界行为发生次数：\n"
"\n"
"\n"
""))
        self.m_zhangai.setText(_translate("MainWindow", " "+str(month-1)+"月障碍物遗留行为发生次数：\n"
"\n"
"\n"
""))
        self.m_tingche.setText(_translate("MainWindow", " "+str(month-1)+"月违规行为总数：\n"
"\n"
"\n"
""))
        self.label_10.setText(_translate("MainWindow", "常用邮箱"))
        self.label_14.setText(_translate("MainWindow", "摄像头IP"))
        self.label_11.setText(_translate("MainWindow", "温馨提示：当违规行为发生时，我们将通过邮件发出警报，为保证您可以及时收到提醒，\n"
"请填写常用邮箱，并切勿将其拉黑或者屏蔽。\n"
"\n"
"我们的邮箱：E_community@126.com"))
        self.certain.setText(_translate("MainWindow", "确认设置"))
        self.m_paowu_2.setText(_translate("MainWindow", "1"))
        self.m_paowu_3.setText(_translate("MainWindow", "次"))
        self.m_yuejie_2.setText(_translate("MainWindow", "2"))
        self.m_yuejie_3.setText(_translate("MainWindow", "次"))
        self.m_zhangai_2.setText(_translate("MainWindow", "3"))
        self.m_zhangai_3.setText(_translate("MainWindow", "次"))
        self.m_tingche_2.setText(_translate("MainWindow", "4"))
        self.m_tingche_3.setText(_translate("MainWindow", "次"))

        self.home.setText(_translate("MainWindow", "系统主页"))
        self.detection.setText(_translate("MainWindow", "实时监测"))
        self.report.setText(_translate("MainWindow", "分析报告"))
        self.message.setText(_translate("MainWindow", "警报提醒"))
        self.connect_us.setText(_translate("MainWindow", "联系我们"))
        self.head.setText(_translate("MainWindow", "E生活——智慧小区安全防护系统"))
        self.overstep.setText(_translate("MainWindow", "\n"
"\n"
"\n"
"\n"
"\n"
"越界检测系统"))
        self.barrier.setText(_translate("MainWindow", "\n"
"\n"
"\n"
"\n"
"\n"
"障碍物检测系统"))
        self.other_function.setText(_translate("MainWindow", "\n"
"\n"
"\n"
"\n"
"\n"
"其他功能"))
        self.throw_2.setText(_translate("MainWindow", "\n"
"\n"
"\n"
"\n"
"\n"
"高空抛物检测系统"))
        self.barrier_back.setText(_translate("MainWindow", " 返回"))
        self.overstep_back.setText(_translate("MainWindow", " 返回"))
        self.draw.setText(_translate("MainWindow", "划定范围"))
        self.os_upload.setText(_translate("MainWindow","选取背景"))
        self.os_display.setText(_translate("MainWindow", "开始监测"))
        self.tw_display.setText(_translate("MainWindow", "开始监测"))
        self.tw_sv.setText(_translate("MainWindow", "保存位置"))
        self.tw_select.setText(_translate("MainWindow", "选择监控"))
        self.tw_record.setText(_translate("MainWindow", "开始截取"))
        self.os_stop.setText(_translate("MainWindow", "停止监测"))
        self.tw_stop.setText(_translate("MainWindow", "停止监测"))
        self.br_display.setText(_translate("MainWindow", "开始监测"))
        self.br_stop.setText(_translate("MainWindow", "停止监测"))
        self.of_display.setText(_translate("MainWindow", "开始监测"))
        self.of_stop.setText(_translate("MainWindow", "停止监测"))
        self.of_draw.setText(_translate("MainWindow", "划定范围"))
        self.of_upload.setText(_translate("MainWindow","选取背景"))
        self.throw_2_back.setText(_translate("MainWindow", " 返回"))
        self.otherfun_back.setText(_translate("MainWindow", " 返回"))
        self.contact_text.setText(_translate("MainWindow", "    GitHub:\n"
"    https://github.com/\n    Jamesyu420/\n    E-Community"
"\n"
"\n"
"    Email:\n"
"    E_community@126.com\n"
""))
        self.learn_more.setText(_translate("MainWindow", "更多"))
        self.label_4.setText(_translate("MainWindow", "欢迎进入智慧小区安全防护系统！"))
        self.label_5.setText(_translate("MainWindow", "如何使用？"))
        self.home_throw.setText(_translate("MainWindow", "    高空抛物检测系统"))
        self.home_barrier.setText(_translate("MainWindow", "    障碍物检测系统"))
        self.home_overstep.setText(_translate("MainWindow", "    越界检测系统"))
        self.home_otfun.setText(_translate("MainWindow", "    其他功能"))
        self.home_start.setText(_translate("MainWindow", "开始使用 "))
        self.zhangai_bt.setText(_translate("MainWindow", "障碍物遗留"))
        self.paowu_bt.setText(_translate("MainWindow", "高空抛物"))
        self.tingche_bt.setText(_translate("MainWindow", "停车位剩余"))
        self.yuejie_bt.setText(_translate("MainWindow", "越界行为"))

    def home_func(self):
        self.home_widget.raise_()

    def detection_func(self):
        self.detectwidget.raise_()

    def report_func(self):
        self.analyse_widget.raise_()
        now = datetime.datetime.now().hour
        if 5 <= now <= 11:
            self.time.setText("Good morning!")
            self.left_pic.setStyleSheet("border-image: url(:/images/image/moring_rc.png);")
            self.right_pic.setStyleSheet("border-image: url(:/images/image/morning_cl.png);")
            self.message1.setText("今天的出行记录，你完成了吗？")
            self.message2.setText("今天，也是需要提醒住户拉近肺类的一天呢！")
        elif 12 <= now <= 18:
            self.time.setText("Good afternoon!")
            self.left_pic.setStyleSheet("border-image: url(:/images/image/lunch.png);")
            self.right_pic.setStyleSheet("border-image: url(:/images/image/coffee.png);")
            self.message1.setText("中午啦，吃饭之前记得要换班呢！")
            self.message2.setText("喝杯咖啡休息一下吧！")
        else:
            self.time.setText("Good evening!")
            self.left_pic.setStyleSheet("border-image: url(:/images/image/evening_pack.png);")
            self.right_pic.setStyleSheet("border-image: url(:/images/image/evening_list.png);")
            self.message1.setText("晚上啦，住户的快递都拿走了吗？")
            self.message2.setText("今天的任务都完成了吗？")

    def connect_us_func(self):
        self.contact_widget.raise_()

    def message_func(self):
        self.remind_widget.raise_()

    def throw_2_func(self):
        self.throw_2_widget.raise_()

    def overstep_func(self):
        self.overstep_widget.raise_()

    def barrier_func(self):
        self.barrier_widget.raise_()

    def other_function_func(self):
        self.otherfunction_widget.raise_()

    def os_upload_func(self):
        self.os_flag=True
        self.os_selectedbg = QtWidgets.QFileDialog.getOpenFileName(self.overstep_widget,
                                                                 "Select one file to open",
                                                                 "/home",
                                                                 "Images(*.jpg *.png)")
        self.od_bg = self.os_selectedbg[0]
        self.overstep_watch.setPixmap(QtGui.QPixmap(self.od_bg))
        self.overstep_watch.setScaledContents(True)

    def draw_func(self):
        self.os_flag=True
        self.overstep_watch.setAlignment(QtCore.Qt.AlignCenter)
        self.result = draw_main(self.od_bg)

    def os_display_func(self):
        month = datetime.datetime.now().month
        year = datetime.datetime.now().year
        hour = datetime.datetime.now().hour
        try:
            f_os = open("overstep_" + str(year)+"_"+str(month) + ".txt")
        except:
            f_os = open("overstep_" + str(year)+"_"+str(month) + ".txt","w+")
        os_dict = f_os.read()
        f_os.close()
        if os_dict:
            os_dict = eval(os_dict)
        else:
            os_dict = {1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,0:0}
        self.os_flag = False
        this_dict={1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,0:0}
        img = 0
        hour1=0
        count=0
        img = overstep_main(self.result,self.email,self.cam_ip)
        for i in img:
            hour_n=datetime.datetime.now().hour
            if self.os_flag:
                    count+=1
                    if count==1:
                        overstep_flag()
                        continue
                    else:
                        break
            if not isinstance(i,int):
                imwrite("a.png", i[0])
                self.yuejie_2.setText(str(i[1]))
                self.os_count = i[1]
                if hour1 == 0 or hour_n - hour >= 1:
                        this_dict[hour_n - hour] += (i[1] - this_dict[hour_n - hour+1])
                        hour = hour_n
                        hour1=1
            else:
                this_dict[hour_n - hour] += (self.os_count - this_dict[hour_n - hour+1])
            self.overstep_watch.setPixmap(QtGui.QPixmap("a.png"))
            self.overstep_watch.setScaledContents(True)            
        for key in os_dict.keys():
            os_dict[key] += this_dict[key]
        f = open("overstep_" + str(year) + "_" + str(month) + ".txt", "w")
        f.write(str(os_dict))
        f.close()
        self.overstep_watch.setPixmap(QtGui.QPixmap("a.png"))
        self.overstep_watch.setScaledContents(True)
        
    def os_stop_func(self):
        self.os_flag = True

    def tw_display_func(self):
        month = datetime.datetime.now().month
        year = datetime.datetime.now().year
        hour = datetime.datetime.now().second
        try:
            f_tw = open("throw_" + str(year)+"_"+str(month) + ".txt")
        except:
            f_tw = open("throw_" + str(year)+"_"+str(month) + ".txt","w+")
        tw_dict = f_tw.read()
        f_tw.close()
        if tw_dict:
            tw_dict = eval(tw_dict)
        else:
            tw_dict = {1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,0:0}

        this_dict={1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,0:0} 
        self.tw_flag=False
        img = 0
        hour1=0
        count=0
        img = tw_main(self.cam_ip, self.email)
        for i in img:
            hour_n=datetime.datetime.now().second
            if self.tw_flag:
                    count+=1
                    if count==1:
                        tw_flag()
                        continue
                    else:
                        break
            if not isinstance(i,int):
                frame = i[0]
                b, g, r = split(frame)
                frame = merge([r,g,b])
                img = QtGui.QImage(frame.data, frame.shape[1], frame.shape[0], QtGui.QImage.Format_RGB888)
                self.throw_watch.setPixmap(QtGui.QPixmap.fromImage(img))

                self.tw_count=i[1]
                self.paowu_2.setText(str(i[1]))
                if hour1 == 0 or hour_n - hour >= 3:
                    this_dict[hour_n - hour] += (i[1] - this_dict[hour_n - hour+1])
                    hour = hour_n
                    hour1=1
            else:
                this_dict[hour_n - hour] += (self.tw_count - this_dict[hour_n - hour+1])
            self.throw_watch.setScaledContents(True)
        for key in tw_dict.keys():
            tw_dict[key] += this_dict[key]
        f = open("throw_" + str(year) + "_" + str(month) + ".txt", "w")
        f.write(str(tw_dict))
        f.close()
        self.throw_watch.setScaledContents(True)

    def tw_stop_func(self):
        self.tw_flag = True

    def br_display_func(self):
        month = datetime.datetime.now().month
        year = datetime.datetime.now().year
        hour = datetime.datetime.now().second
        try:
            f_br = open("barrier_" + str(year)+"_"+str(month) + ".txt")
        except:
            f_br = open("barrier_" + str(year)+"_"+str(month) + ".txt","w+")
        br_dict = f_br.read()
        f_br.close()
        if br_dict:
            br_dict = eval(br_dict)
        else:
            br_dict = {1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,0:0}
        this_dict={1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,0:0} 
        self.br_flag=False
        img = 0
        hour1=0
        count=0
        img = br_main(self.cam_ip,self.email)        
        for i in img:
            hour_n=datetime.datetime.now().second
            if self.br_flag:
                    count+=1
                    if count==1:
                        br_flag()
                        continue
                    else:
                        break
            if not isinstance(i,int):
                frame = i[0]
                b, g, r = split(frame)
                frame = merge([r,g,b])
                img = QtGui.QImage(frame.data, frame.shape[1], frame.shape[0], QtGui.QImage.Format_RGB888)
                self.barrier_watch.setPixmap(QtGui.QPixmap.fromImage(img))
                self.br_count=i[1]
                self.zhangai_2.setText(str(i[1]))
                if hour1 == 0 or hour_n - hour >= 3:
                    this_dict[hour_n - hour] += (i[1] - this_dict[hour_n - hour+1])
                    hour = hour_n
                    hour1=1
            else:
                this_dict[hour_n - hour] += (self.br_count - this_dict[hour_n - hour+1])
            self.barrier_watch.setScaledContents(True)
        for key in br_dict.keys():
            br_dict[key] += this_dict[key]
        f = open("barrier_" + str(year) + "_" + str(month) + ".txt", "w")
        f.write(str(br_dict))
        f.close()
        self.barrier_watch.setScaledContents(True)

    def br_stop_func(self):
        self.br_flag = True

    def of_draw_func(self):
        self.of_flag = True
        self.ow_fun_watch.setAlignment(QtCore.Qt.AlignCenter)
        self.of_bg=imread(self.of_bg)
        with open('coordinates.yml', "w+") as points:
            generator = CoordinatesGenerator(self.of_bg, points, (255, 0, 0))
            generator.generate()

    def of_upload_func(self):
        self.of_flag=True
        self.of_selectedbg = QtWidgets.QFileDialog.getOpenFileName(self.otherfunction_widget,
                                                                 "Select one file to open",
                                                                 "/home",
                                                                 "Images(*.jpg *.png)")
        self.of_bg = self.of_selectedbg[0]
        self.ow_fun_watch.setPixmap(QtGui.QPixmap(self.of_bg))
        self.ow_fun_watch.setScaledContents(True)

    def of_display_func(self):
        month = datetime.datetime.now().month
        year = datetime.datetime.now().year
        hour = datetime.datetime.now().second
        try:
            f_of = open("car_stop_" + str(year)+"_"+str(month) + ".txt")
        except:
            f_of = open("car_stop_" + str(year)+"_"+str(month) + ".txt","w+")
        of_dict = f_of.read()
        f_of.close()
        if of_dict:
            of_dict = eval(of_dict)
        else:
            of_dict = {1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,0:0}
        this_dict={1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:0,16:0,17:0,18:0,19:0,20:0,21:0,22:0,23:0,0:0} 
        self.of_flag=False
        img = 0
        count = 0
        hour1=0
        img = car_main(self.cam_ip)
        for i in img:
            hour_n=datetime.datetime.now().second
            if self.of_flag:
                    count+=1
                    if count==1:
                        car_flag()
                        continue
                    else:
                        break
            if not isinstance(i,int):
                frame=i[0]
                b, g, r = split(frame)
                frame = merge([r,g,b])
                img = QtGui.QImage(frame.data, frame.shape[1], frame.shape[0], QtGui.QImage.Format_RGB888)
                self.ow_fun_watch.setPixmap(QtGui.QPixmap.fromImage(img))
                self.ow_fun_count=i[1]
                self.of_count=i[1]
                self.tingche_2.setText(str(i[1]))
                if hour1 == 0 or hour_n - hour >= 3:
                    this_dict[hour_n - hour]= i[1]
                    hour = hour_n
                    hour1=1
            else:
                this_dict[hour_n - hour]= self.of_count
            self.ow_fun_watch.setScaledContents(True)
        for key in of_dict.keys():
            of_dict[key] += this_dict[key]
        f = open("car_stop_" + str(year) + "_" + str(month) + ".txt", "w")
        f.write(str(of_dict))
        f.close()
        self.ow_fun_watch.setScaledContents(True)

    def of_stop_func(self):
        self.of_flag = True
    
    def tw_sv_func(self):
        self.tw_svdir = QtWidgets.QFileDialog.getExistingDirectory(self.throw_2_widget,"Select one Directory to open")
    
    def tw_select_func(self):
        self.tw_slname = QtWidgets.QFileDialog.getOpenFileName(self.throw_2_widget,
                                                                 "Select one file to open",
                                                                 "/home",
                                                                 "Video Files(*.avi *.wmv *.mov *.mpeg *.mpg *.mp4 *.mkv *.rm *.rmvb *.flv)")
        self.tw_slname = self.tw_slname[0]

    def tw_record_func(self):
        locate=0
        self.tw_slname=self.tw_slname.split("/")[-1]
        Number=eval(self.tw_slname[0:-4])
        starts = open("record_sta.txt")
        starts = starts.read().split("\n")
        sta_lo = eval(starts[Number - 1])
        ends = open("record_end.txt")
        ends = ends.read().split("\n")
        end_lo = eval(ends[Number - 1])
        x=0
        for key in end_lo.keys():
            x+=1
            tw_record(self.tw_slname, self.tw_svdir, sta_lo[key], end_lo[key], str(Number) + '_' + str(x))
        dialog =QtWidgets.QDialog()
        label = QtWidgets.QLabel(dialog)
        label.setText("截取成功！")
        label.setGeometry(QtCore.QRect(65,30,90,40))
        dialog.setWindowTitle("提示")
        dialog.setGeometry(QtCore.QRect(400,250, 180, 100))
        dialog.setWindowModality(QtCore.Qt.ApplicationModal)
        dialog.exec_()

    def month_rp_func(self):
        self.m_analyse_widget.raise_()
        month_n = datetime.datetime.now().month
        year=datetime.datetime.now().year
        try:
            f = open("overstep_"+str(year)+"_"+str(month_n-1)+".txt")
        except:
            f = open("overstep_"+str(year)+"_"+str(month_n-1)+".txt","w+")
        f_dict = eval(f.read())
        f.close()
        os_number=0
        for key in f_dict.keys():
            os_number += f_dict[key]
        self.m_yuejie_2.setText(str(os_number))
        try:
            f1 = open("throw_"+str(year)+"_"+str(month_n-1)+".txt")
        except:
            f1 = open("throw_"+str(year)+"_"+str(month_n-1)+".txt","w+")
        f1_dict = eval(f1.read())
        f1.close()
        tw_number=0
        for key in f1_dict.keys():
            tw_number += f1_dict[key]
        self.m_paowu_2.setText(str(tw_number))
        try:
            f2 = open("barrier_"+str(year)+"_"+str(month_n-1)+".txt")
        except:
            f2 = open("barrier_"+str(year)+"_"+str(month_n-1)+".txt","w+")
        f2_dict = eval(f2.read())
        f2.close()
        br_number=0
        for key in f2_dict.keys():
            br_number += f2_dict[key]
        self.m_zhangai_2.setText(str(br_number))
        try:
            f3 = open("car_stop_"+str(year)+"_"+str(month_n-1)+".txt")
        except:
            f3 = open("car_stop_"+str(year)+"_"+str(month_n-1)+".txt","w+")
        f3_dict = eval(f3.read())
        f3.close()
        of_number=0
        for key in f3_dict.keys():
            of_number += f3_dict[key]
        self.m_tingche_2.setText(str(os_number + br_number + tw_number))
        try:
            summary = open(str(year)+".txt")
        except:
            summary = open(str(year)+".txt","w+")
        m_dict = summary.read()
        summary.close()
        if m_dict:
            m_dict = eval(m_dict)
        else:
            m_dict={1:(0,0,0,0),2:(0,0,0,0),3:(0,0,0,0),4:(0,0,0,0),5:(0,0,0,0),6:(0,0,0,0),7:(0,0,0,0),8:(0,0,0,0),9:(0,0,0,0),10:(0,0,0,0),11:(0,0,0,0),12:(0,0,0,0)}
        m_dict[month_n-1] = (os_number,br_number,tw_number,os_number + br_number + tw_number)
        last_m = m_dict[month_n - 2]
        distance = os_number + br_number + tw_number - last_m[3]
        if distance > 0:
            context1 = "  相比" + str(month_n - 2) + "月，\n" + "  "+str(month_n - 1) + "月小区居民违规次数减少了"+str(distance)+"次。"
        elif distance < 0:
            context1 = "  相比" + str(month_n - 2) + "月，\n" + "  "+str(month_n - 1) + "月小区居民违规次数增加了" + str(-distance) + "次。"
        else:
            context1 = "  相比" + str(month_n - 2) + "月，\n" + "  "+str(month_n - 1) + "月小区居民违规次数没有明显变化。"
        distance_tw = tw_number - last_m[2]
        if distance_tw < 0:
            context2 = "  其中，\n  高空抛物行为减少了" + str(-distance_tw) + "次，\n"
        elif distance_tw > 0:
            context2 = "  其中，\n  高空抛物行为增加了" + str(distance_tw) + "次，\n"
        else:
            context2 = "  其中，\n  高空抛物行为发生次数没有变化，\n"
        distance_os = os_number - last_m[0]
        if distance_os < 0:
            context3 = "  越界行为减少了" + str(-distance_os) + "次，\n"
        elif distance_os > 0:
            context3 = "  越界行为增加了" + str(distance_os) + "次，\n"
        else:
            context3 = "  越界行为发生次数没有变化，\n"
        distance_br = br_number - last_m[1]
        if distance_br < 0:
            context4 = "  障碍物遗留行为减少了" + str(-distance_br) + "次。\n"
        elif distance_br > 0:
            context4 = "  障碍物遗留行为增加了" + str(distance_br) + "次。\n"
        else:
            context4 = "  障碍物遗留行为发生次数没有变化。"
        summary = open(str(year) + ".txt","w")
        summary.write(str(m_dict))
        self.label_13.setText(context1+context2+context3+context4)
    
    def chart(self,name):
        month_n=datetime.datetime.now().month
        fig=plt.figure()
        ax=fig.add_subplot(1,1,1)
        ax.set_xlabel('Hour')
        ax.set_ylabel('Times')
        ax.set_title('')
        line = None
        plt.grid(True)
        plt.ion()
        try:
            f = open(name+"_2021_"+str(month_n-1)+".txt")
        except:
            f = open(name+"_2021_"+str(month_n-1)+".txt","w+")
        os_dict = eval(f.read())
        f.close()
        obsX = []
        obsY = []
        for key in os_dict.keys():
            obsX.append(key)
            obsY.append(os_dict[key])
        ax.set_xlim([0,23])
        ax.set_ylim([-30, 40])
        if line is None:
            line = ax.plot(obsX, obsY, '-g', marker='*')[0]
        line.set_xdata(obsX)
        line.set_ydata(obsY)
        plt.savefig("1.png")
        x = QtGui.QPixmap("1.png")
        self.huatu.setPixmap(x)
        self.huatu.setScaledContents(True)

    def certain_func(self):
        self.email = self.input_email.toPlainText()
        dialog =QtWidgets.QDialog()
        label = QtWidgets.QLabel(dialog)
        label.setText("设置成功！")
        label.setGeometry(QtCore.QRect(65,30,90,40))
        dialog.setWindowTitle("提示")
        dialog.setGeometry(QtCore.QRect(400,250, 180, 100))
        dialog.setWindowModality(QtCore.Qt.ApplicationModal)
        dialog.exec_()